#dedicated packages to deal with dates:
lubridate
zoo
xts

#current date:
today <- Sys.Date()
today
"2020-01-21"

class(today)
"Date"

#current time
now <- Sys.time()   #note that t in time is lower case
now
"2020-01-21 15:47:35 CEST"

class(now)
"POSIXct" "POSIXt"

my_date <- as.Date("1985-01-15") #first month then day
my_date
"1985-01-15"

my_date <- as.Date("1985-15-01") #fails because R cannot find 15 month
error

my_date <- as.Date("1985-15-01", format = "%Y-%d-%m") #this time format changes to first day then month
my_date
"1985-01-15"

#we can make calculations with date
my_date <- "1971-05-14"
my_date2 <- as.Date("1998-09-29")
my_date2 - my_date
Time difference of 10000 days

#under the hood R saves dates and times as simple numerics
#dates objects consists of number of days since January 1 1970
my_date
"1971-05-14"
unclass(my_date)
498

#more date formats:
#Create and format dates
#To create a Date object from a simple character string in R, you can use the as.Date() function. 
The character string has to obey a format that can be defined using a set of symbols (the examples correspond to 13 January, 1982):

%Y: 4-digit year (1982)
%y: 2-digit year (82)
%m: 2-digit month (01)
%d: 2-digit day of the month (13)
%A: weekday (Wednesday)
%a: abbreviated weekday (Wed)
%B: month (January)
%b: abbreviated month (Jan)
The following R commands will all create the same Date object for the 13th day in January of 1982:

as.Date("1982-01-13")
as.Date("Jan-13-82", format = "%b-%d-%y")
as.Date("13 January, 1982", format = "%d %B, %Y")
Notice that the first line here did not need a format argument, because by default R matches your character string 
to the formats "%Y-%m-%d" or "%Y/%m/%d".

In addition to creating dates, you can also convert dates to character strings that use a different date notation. 
For this, you use the format() function. Try the following lines of code:

today <- Sys.Date()
format(Sys.Date(), format = "%d %B, %Y")
format(Sys.Date(), format = "Today is a %A!")

#Create and format times
Similar to working with dates, you can use as.POSIXct() to convert from a character string to a POSIXct object, 
and format() to convert from a POSIXct object to a character string. Again, you have a wide variety of symbols:

%H: hours as a decimal number (00-23), 0-23 system
%I: hours as a decimal number (01-12), 0-12 system
%M: minutes as a decimal number
%S: seconds as a decimal number
%T: shorthand notation for the typical format %H:%M:%S
%p: AM/PM indicator
For a full list of conversion symbols, consult the strptime documentation in the console:

?strptime
Again,as.POSIXct() uses a default format to match character strings. In this case, it's %Y-%m-%d %H:%M:%S. 


#Exercises:

# Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"

# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2)
date3 <- as.Date(str3, format = "%d/%B/%Y")

# Convert dates to formatted strings
format(date1, "%A")
format(date2, "%d")
format(date3, "%b %Y")
[1] "Thursday"
[1] "15"
[1] "Jan 2006"

#Exercise with times:
#Convert two strings that represent timestamps, str1 and str2, to POSIXct objects called time1 and time2.
#Using format(), create a string from time1 containing only the minutes.
#From time2, extract the hours and minutes as "hours:minutes AM/PM". Refer to the assignment text above to find 
the correct conversion symbols!

# Definition of character strings representing times
str1 <- "May 23, '96 hours:23 minutes:01 seconds:45"
str2 <- "2012-3-12 14:23:08"

# Convert the strings to POSIXct objects: time1, time2
time1 <- as.POSIXct(str1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
time2 <- as.POSIXct(str2)

# Convert times to formatted strings
format(time1, "%M")
[1] "01"
format(time2, "%I:%M %p")
[1] "02:23 PM"


#Exercise: time calculations
# day1, day2, day3, day4 and day5 are already available in the workspace

# Difference between last and first pizza day
day5 - day1

# Create vector pizza
pizza <- c(day1, day2, day3, day4, day5)

# Create differences between consecutive pizza days: day_diff
day_diff = diff(pizza)
day_diff = pizza[-1] - pizza[-5] #this method gives the same answer as above

# Average period between two consecutive pizza days
mean(day_diff)


#Calculations with Times
Calculations using POSIXct objects are completely analogous to those using Date objects. 
Try to experiment with this code to increase or decrease POSIXct objects:

now <- Sys.time()
now + 3600          # add an hour
now - 3600 * 24     # subtract a day
Adding or substracting time objects is also straightforward:

birth <- as.POSIXct("1879-03-14 14:37:23")
death <- as.POSIXct("1955-04-18 03:47:12")
einstein <- death - birth
einstein
You're developing a website that requires users to log in and out. You want to know what is the total and average 
amount of time a particular user spends on your website. This user has logged in 5 times and logged out 5 times as well. 
These times are gathered in the vectors login and logout, which are already defined in the workspace.

#Exercise:
# login and logout are already defined in the workspace
# Calculate the difference between login and logout: time_online
time_online <- logout - login

# Inspect the variable time_online
time_online
Time differences in secs
[1] 2305.11818   34.18472  837.18182 2397.90153 1851.30411

# Calculate the total time online
sum(time_online)
Time difference of 7425.69 secs

# Calculate the average time online
mean(time_online)
Time difference of 1485.138 secs


#Exercise: Seasons
A vector astro, which contains character strings representing the dates on which the 4 astronomical seasons start, 
has been defined on your workspace. Similarly, a vector meteo has already been created for you, with the meteorological 
beginnings of a season.
astro
       spring        summer          fall        winter 
"20-Mar-2015" "25-Jun-2015" "23-Sep-2015" "22-Dec-2015"
meteo
       spring            summer              fall            winter 
"March 1, 15"      "June 1, 15" "September 1, 15"  "December 1, 15"

Use as.Date() to convert the astro vector to a vector containing Date objects. You will need the %d, %b and %Y symbols 
to specify the format. Store the resulting vector as astro_dates.
Use as.Date() to convert the meteo vector to a vector with Date objects. This time, you will need the %B, %d and %y symbols 
for the format argument. Store the resulting vector as meteo_dates.
With a combination of max(), abs() and -, calculate the maximum absolute difference between the astronomical and the meteorological 
beginnings of a season, i.e. astro_dates and meteo_dates. Simply print this maximum difference to the console output.

# Convert astro to vector of Date objects: astro_dates
astro_dates <- as.Date(astro, format = "%d-%b-%Y")

# Convert meteo to vector of Date objects: meteo_dates
meteo_dates <- as.Date(meteo, format = "%B %d, %y")

# Calculate the maximum absolute difference between astro_dates and meteo_dates
max(abs(meteo_dates - astro_dates))
Time difference of 24 days
> meteo_dates
[1] "2015-03-01" "2015-06-01" "2015-09-01" "2015-12-01"
> astro_dates
[1] "2015-03-20" "2015-06-25" "2015-09-23" "2015-12-22"


