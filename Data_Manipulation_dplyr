### Data Manipulation with dplyr ###


#exploring our data:
#this course uses 'counties' data in R
#basic functions to explore data: select(), filter(), mutate(), arrange()

#glimpse gives us a general summary of data
glimpse(counties)

#select() is used to select variables (columns)
counties_selected <- counties %>%
  select(state, county, population, unemployment)

head(counties_selected)
# A tibble: 6 x 4
  state   county  population public_work
  <chr>   <chr>        <dbl>       <dbl>
1 Alabama Autauga      55221        20.9
2 Alabama Baldwin     195121        12.3
3 Alabama Barbour      26932        20.8
4 Alabama Bibb         22604        16.1
5 Alabama Blount       57710        13.5
6 Alabama Bullock      10678        15.1

#arrange is used to sort data by variables in ascending or descending order (desc)
counties_selected %>%
  arrange(desc(population)) 

#filter is used to select rows based on criteria
counties_selected %>%
  arrange(desc(population)) %>%
  filter(state == 'New York', unemployment < 6)

#filter by several character values:
# Filter for the names Steven, Thomas, and Matthew 
selected_names <- babynames %>%
  filter(name %in% c("Steven", "Thomas", "Matthew"))

# Plot the number of names using a different color for each name
ggplot(selected_names, aes(x = year, y = number, color = name)) +
  geom_line()


#mutate() is used to add new variables, or change variables
# Add a new column public_workers with the number of people employed in public work
counties_selected %>%
  mutate(public_workers = public_work * population / 100)
# A tibble: 3,138 x 5
   state   county   population public_work public_workers
   <chr>   <chr>         <dbl>       <dbl>          <dbl>
 1 Alabama Autauga       55221        20.9         11541.
 2 Alabama Baldwin      195121        12.3         24000.
 3 Alabama Barbour       26932        20.8          5602.
 4 Alabama Bibb          22604        16.1          3639.
 5 Alabama Blount        57710        13.5          7791.
 6 Alabama Bullock       10678        15.1          1612.
 7 Alabama Butler        20354        16.2          3297.
 8 Alabama Calhoun      116648        20.8         24263.
 9 Alabama Chambers      34079        12.1          4124.
10 Alabama Cherokee      26008        18.5          4811.
# ... with 3,128 more rows

# we can also do grouped mutates
# below code calculates total population by each state and adds that to data as a new column named "total_population"
counties %>%
  group_by(state) %>%
  mutate(total_population = sum(population)

#count() gives us number of observations, or observations in each value of a variable
count(counties)
3138

countcounties$states) #or
counties %>%
  count(states)
# A tibble: 50 x 2
  state       n
  <chr>     <int>
1 Alabama     67
2 Alaska      28
...

#count can be used with sort argument:
counties %>%
  count(state, sort = TRUE)
# A tibble: 50 x 2
  state       n
  <chr>     <int>
1 Texas      253
2 Georgia    159
...

#we can add weights to our count:
counties %>%
  count(state, wt = population, sort = TRUE)    #in this case n column shows total population instead of number of counties
# A tibble: 50 x 2
  state              n
  <chr>          <dbl>
1 California  38421464  
2 Texas       26538497
3 New York    19673174
...


##Group_by and summarize are used to aggregate data

#summarize is used to summarize variables
counties %>%
  summarize(total_population = sum(population))
#A tibble: 1 x 1
 total_population
            <dbl>
1       315845353   

#we can aggregate multiple variables using summarize using functions such as mean(), median(), min(), max(), n() for the group size
counties %>%
  summarize(total_population = sum(population), average_uneployment = mean(unemployment)


#group_by is used to look at the data in groups
counties %>%
  group_by(state) %>%
  summarize(total_population = sum(population), average_uneployment = mean(unemployment) %>%
  arrange(desc(average_unemployment)

#we can group by multiple columns, which displays one row for each combinaton of columns to be grouped
counties %>%
  group_by(state, metro) %>%
  summarize(total_population = sum(population))

#ungroup can be used to stop grouping:
counties %>%
  group_by(state, metro) %>%
  summarize(total_population = sum(population)) %>%
  ungroup()


#Exercise:
counties_selected <- counties %>%
  select(state, county, population, land_area)
# Add a density column (total population per total area), then sort in descending order
counties_selected %>%
  group_by(state) %>%
  summarize(total_area = sum(land_area),
            total_population = sum(population)) %>%
  mutate(density= total_population/total_area) %>%
  arrange(desc(density))

#notice that when you use summarize it creates a new data table, so following code should use variables created by summarize

#Example: Calculate the average_pop and median_pop columns per each region
counties_selected %>%
  group_by(region, state) %>%
  summarize(total_pop = sum(population)) %>%
  summarize(average_pop=mean(total_pop), median_pop=median(total_pop))    #in this step we could not use population, because it's not available


##top_n is used to find the most extreme observations from each group

#top_n(number of observations, column we want to weight by)

counties_selected <- counties %>%
  select(state, county, population, unemployment, income)

#the county with highest population in each state:
counties_selected %>%
  group_by(state) %>%
  top_n(1, population)

#Example:
counties_selected %>%
  group_by(region, state) %>%
  # Calculate average income
  summarize(average_income=mean(income)) %>%
  # Find the highest income state in each region
  top_n(1, average_income)



## SELECTING VARIABLES (COLUMNS)

#selecting a range of columns

counties %>%
  select(state, county, drive:work_at_home)  #selects state, county variables along with all others from 'drive' to 'work_at_home'

#selection based on variable name: contains(char)

counties %>%
  select(state, county, contains("work"))   #selects state, country variables along with all others containing 'work' phrase in their name
#A tibble: 3138 x 6
  state county work_at_home private_work public_work family_work
...

#select only columns that start with a word: starts_wirh("word")
counties %>%
  select(state, county, starts_with("income"))

#select only variables/cols that end with a word: ends_with("word")

#select last column: last_col()

#select can be used to remove variables by putting a minus sign in front of the column name: 
counties %>%
  select(-census_id)


#EXERCISE:
counties %>%
  # Select the state, county, population, and those ending with "work"
  select(state, county, population, ends_with("work")) %>%
  # Filter for counties that have at least 50% of people engaged in public work
  filter(public_work > 50)


#Rename() columns
#rename(new_name = original_name)
counties_selected %>%
  rename(unemployment_rate = unemployment)
  
#we can also rename columns when selecting them
counties_selected %>%
  select(state, county, population, unempyloyment_rate = unemployment)
  
  
# Transmute
#like a combination of select and mutate
counties %>%
  transmute(state, county, fraction_men = men/population)


## WINDOW FUNCTION

#takes a vector and returns another vector of same length
v <- c(1, 3, 5, 9)
#lag function shifts each item right by 1, first item becomes NA:
lag(v)
[1] NA 1 3 5
#first order lag/time difference:
v - lag(v)
[1] NA 2 2 4

# I LOVE CODING YAY :)

#EXERCISES:
#in the babynames data you're going to explore which year each name was the most common:
# Find the year each name is most common 
# Find the year each name is most common 
babynames %>%
  group_by(year) %>%
  mutate(year_total=sum(number)) %>%
  ungroup() %>%
  mutate(fraction = number / year_total) %>%
  group_by(name) %>%
  top_n(1, fraction)
  
#Use a grouped mutate to add two columns:
#name_total, with the total number of babies born with that name in the entire dataset.
#name_max, with the highest number of babies born in any year.
# Add columns name_total and name_max for each name
babynames %>%
  group_by(name) %>%
  mutate(name_total = sum(number), name_max = max(number)) %>%
#Add another step to ungroup the table.
  ungroup() %>%
#Add a column called fraction_max, with the number in the year divided by the maximum for that name.
  mutate(fraction_max=number/name_max)

# Filter for the names Steven, Thomas, and Matthew
names_filtered <- names_normalized %>%
  filter(name %in% c("Steven", "Thomas", "Matthew"))
  
# Visualize these names over time
ggplot(names_
filtered, aes(x=year,y=fraction_max, color=name)) +
  geom_line()


#group_by mutate exercise with lag function:
babynames_fraction %>%
  # Arrange the data in order of name, then year 
  arrange(name, year) %>%
  # Group the data by name
  group_by(name) %>%
  # Add a ratio column that contains the ratio between each year 
  mutate(ratio = fraction/lag(fraction))


babynames_ratios_filtered %>%
  # Extract the largest ratio from each name 
  top_n(1, ratio) %>%
  # Sort the ratio column in descending order 
  arrange(desc(ratio)) %>%
  # Filter for fractions greater than or equal to 0.001
  filter(fraction >= 0.001)
