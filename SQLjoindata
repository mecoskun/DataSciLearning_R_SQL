--Inner Join

-- Inner join the cities table on the left to the countries table on the right, keeping all of the fields in both tables.

SELECT * 
FROM cities
  -- Inner join to countries
  INNER JOIN countries
    -- Match on the country codes
    ON cities.country_code = countries.code;
    
-- Select name fields (with alias) and region 
SELECT cities.name AS city, countries.name AS country, region
FROM cities
  INNER JOIN countries
    ON cities.country_code = countries.code;
    
--Instead of writing the full table name, you can use table aliasing as a shortcut. 
--For tables you also use AS to add the alias immediately after the table name with a space. Check out the aliasing of cities and countries below.

--SELECT c1.name AS city, c2.name AS country
--FROM cities AS c1
--INNER JOIN countries AS c2
--ON c1.country_code = c2.code;


-- Select fields with aliases
SELECT c.code AS country_code, name, year, inflation_rate
FROM countries AS c
  -- Join to economies (alias e)
  INNER JOIN economies AS e
    -- Match on code
    ON c.code = e.code;


--Inner join (3)
--The ability to combine multiple joins in a single query is a powerful feature of SQL, e.g:

SELECT *
FROM left_table
  INNER JOIN right_table
    ON left_table.id = right_table.id
  INNER JOIN another_table
    ON left_table.id = another_table.id;
    
-- Select fields
SELECT c.code, c.name, c.region, p.year, p.fertility_rate
  -- From countries (alias as c)
  FROM countries AS c
  -- Join with populations (as p)
  INNER JOIN populations AS p
    -- Match on country code
    ON c.code = p.country_code;

-- Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- From countries (alias as c)
  FROM countries AS c
  -- Join to populations (as p)
  INNER JOIN populations AS p
    -- Match on country code
    ON c.code = p.country_code
  -- Join to economies (as e)
  INNER JOIN economies AS e
    -- Match on country code
    ON c.code = e.code;



-- Joining on multiple ID colunmns:
- can be achieved with AND keyword

-- Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- From countries (alias as c)
  FROM countries AS c
  -- Join to populations (as p)
  INNER JOIN populations AS p
    -- Match on country code
    ON c.code = p.country_code
  -- Join to economies (as e)
  INNER JOIN economies AS e
    -- Match on country code and year
    ON c.code = e.code AND e.year = p.year;         -----------> inner join based on multiple index



--INNER JOIN via USING

--when join ID is the same name in both tables we can use USING keyword instead of ON

-- Select fields
SELECT c.name AS country, continent, l.name AS language, official
  -- From countries (alias as c)
  FROM countries AS c
  -- Join to languages (as l)
  INNER JOIN languages AS l
    -- Match using code
    USING(code)


-- Self Joins: Joining a table with itself

-- Select fields with aliases
SELECT p1.country_code,
p1.size AS size2010,
p2.size AS size2015
-- From populations (alias as p1)
FROM populations AS p1
  -- Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- Match on country code
    USING(country_code)
    
--Extend the ON in your query to include only those records where the p1.year (2010) matches with p2.year - 5 (2015 - 5 = 2010). 
--This will omit the three entries per country_code that you aren't interested in.

-- Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015,
       -- Calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- From populations (alias as p1)
FROM populations as p1
  -- Join to itself (alias as p2)
  INNEr JOIN populations as p2
    -- Match on country code
    ON p1.country_code = p2.country_code
        -- and year (with calculation)
        AND p1.year = p2.year - 5;



-------------------- Case when and then ----------------
--Often it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.

--You can use CASE with WHEN, THEN, ELSE, and END to define a new grouping field.

--Using the countries table, create a new field AS geosize_group that groups the countries into three groups:
--If surface_area is greater than 2 million, geosize_group is 'large'.
--If surface_area is greater than 350 thousand but not larger than 2 million, geosize_group is 'medium'.
--Otherwise, geosize_group is 'small'.

SELECT name, continent, code, surface_area,
    -- First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- Second case
        WHEN surface_area > 350000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name
        AS geosize_group
-- From table
FROM countries;


--The table you created with the added geosize_group field has been loaded for you here with the name countries_plus. 
--Observe the use of (and the placement of) the INTO command to create this countries_plus table:

SELECT name, continent, code, surface_area,
    CASE WHEN surface_area > 2000000
            THEN 'large'
       WHEN surface_area > 350000
            THEN 'medium'
       ELSE 'small' END
       AS geosize_group
INTO countries_plus
FROM countries;


--You will now explore the relationship between the size of a country in terms of surface area and in terms of population using grouping fields created with CASE.
SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

--Sort the data based on geosize_group, in ascending order so that large appears on top.
--Select the name, continent, geosize_group, and popsize_group fields.
-- Select fields
SELECT name, continent, geosize_group, popsize_group
-- From countries_plus (alias as c)
FROM countries_plus AS c
  -- Join to pop_plus (alias as p)
  INNER JOIN pop_plus AS p
    -- Match on country code
    ON code = country_code
-- Order the table    
ORDER BY geosize_group;



----------------------------------- LEFT and RIGHT JOINs ---------------------------

-- Select the city name (with alias), the country code,
-- the country name (with alias), the region,
-- and the city proper population
SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
-- From left table (with alias)
FROM cities AS c1
  -- Join to right table (with alias)
  INNER JOIN countries AS c2
    -- Match on country code
    ON c1.country_code = c2.code
-- Order by descending country code
ORDER BY code DESC;

-- same table  with left join instead of inner join
SELECT c1.name AS city, code, c2.name AS country,
       region, city_proper_pop
FROM cities AS c1
  -- Join right table (with alias)
  LEFT JOIN countries AS c2
    -- Match on country code
    ON c1.country_code = c2.code
-- Order by descending country code
ORDER BY code DESC;


-- Left join (3)
--You'll now revisit the use of the AVG() function introduced in our introductory SQL course.
--You will use it in combination with left join to determine the average gross domestic product (GDP) per capita by region in 2010.

-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
FROM countries AS c
  -- Left join with economies (alias as e)
  LEFT JOIN economies AS e
    -- Match on code fields
    ON c.code = e.code
-- Focus on 2010
WHERE year = 2010
-- Group by region
GROUP BY region;


-- RIGHT JOIN
-- Right join is similar to left join, but it takes right table as primary source

-- FULL JOIN
-- full join keeps id and rows from both tables


-- EXAMPLE: Begin with a full join with languages on the left and countries on the right. 
-- Choose records in which countries.name starts with the capital letter 'V' or is NULL.
SELECT countries.name, code, languages.name AS language
-- From languages
FROM languages
  -- Join to countries
  FULL JOIN countries
    -- Match on code
    USING (code)
-- Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
-- Order by ascending countries.name
ORDER BY countries.name;


-- CROSS JOIN
-- creates all possible combinations of each table, like a cross product


# Example
-- Select fields
SELECT c.name AS country, region, life_expectancy AS life_exp
-- From countries (alias as c)
FROM countries AS c
  -- Join to populations (alias as p)
  LEFT JOIN populations AS p
    -- Match on country code
    ON c.code = p.country_code
-- Focus on 2010
WHERE year = 2010
-- Order by life_exp
ORDER BY life_exp
-- Limit to 5 records
LIMIT 5


----- UNION, UNION ALL
-- these commands stack records on the top of each other! Therefore combining multiple tables into one --> same as rbind in R
-- union includes all rows from both tables, 
-- union all includes double of intersecting rows 
-- intersect gives only intersection (same selected items from both tables)
-- UNION ALL will extract all records from two tables, while INTERSECT will only return records that both tables have in common.
-- except gives A - B, excepting the intersection
-- IMPORTANT: UNION should be used to combine columns of the same data type across data tables!

--Example--
-- Select fields from 2010 table
SELECT *
  -- From 2010 table
  FROM economies2010
	-- Set theory clause
	UNION
-- Select fields from 2015 table
SELECT *
  -- From 2015 table
  FROM economies2015
-- Order by code and year
ORDER BY code, year;

-- economies2010:
code	year	income_group	gross_savings
AFG	2010	Low income	37.133
AGO	2010	Upper middle income	23.534

-- economies2015:
code	year	income_group	gross_savings
AFG	2015	Low income	21.466
AGO	2015	Upper middle income	-0.425

-- above UNION result:
code	year	income_group	gross_savings
AFG	2010	Low income	37.133
AFG	2015	Low income	21.466
AGO	2010	Upper middle income	23.534
AGO	2015	Upper middle income	-0.425


-- UNION can also be used to determine all occurrences of a field across multiple tables. Try out this exercise with no starter code.
-- Determine all (non-duplicated) country codes in either the cities or the currencies table. The result should be a table with only one field called country_code.

-- Select field
SELECT country_code
  -- From cities
  FROM cities
	-- Set theory clause
	UNION
-- Select field
SELECT code
  -- From currencies
  FROM currencies
-- Order by country_code
ORDER BY country_code;



-- Use INTERSECT to determine the records in common for country code and year for the economies and populations tables.

-- Example:
-- Select fields
SELECT code, year
  -- From economies
  FROM economies
	-- Set theory clause
	INTERSECT
-- Select fields
SELECT country_code, year
  -- From populations
  FROM populations
-- Order by code and year
ORDER BY code, year;


-- Example: As you think about major world cities and their corresponding country, you may ask which countries also have a city with the same name as their country name?
-- Select fields
SELECT name
  -- From countries
  FROM countries
	-- Set theory clause
	INTERSECT
-- Select fields
SELECT name
  -- From cities
  FROM cities;
  
  
  -- Except
-- Example: Get the names of cities in cities which are not noted as capital cities in countries as a single field result.
-- Select field
SELECT name
  -- From cities
  FROM cities
	-- Set theory clause
	EXCEPT
-- Select field
SELECT capital
  -- From countries
  FROM countries
-- Order by result
ORDER BY name;


-- SEMI-JOINS and ANTI-JOINS (SUBQUERIES)
-- these joins are similar to where clause using a second table

-- below is an example of semi-join, we could change the where condition to NOT IN to make this example of anti-join:

SELECT president, country, continent
FROM presidents
WHERE country IN
    (SELECT name
     FROM states
     WHERE indep_year < 1800)
     


-- Example: Your task here will be to incorporate two of UNION/UNION ALL/INTERSECT/EXCEPT to solve a challenge involving three tables.
-- Identify the country codes that are included in either economies or currencies but not in populations.
-- Use that result to determine the names of cities in the countries that match the specification in the previous instruction.

-- Select the city name
SELECT name
  -- Alias the table where city name resides
  FROM cities AS c1
  -- Choose only records matching the result of multiple set theory clauses
  WHERE country_code IN
(
    -- Select appropriate field from economies AS e
    SELECT e.code
    FROM economies AS e
    -- Get all additional (unique) values of the field from currencies AS c2  
    UNION
    SELECT c2.code
    FROM currencies AS c2
    -- Exclude those appearing in populations AS p
    EXCEPT
    SELECT p.country_code
    FROM populations AS p
);







